#!/usr/bin/env bash

set -o errexit  # stop on first error
#set -o xtrace  # log every step
set -o nounset  # exit when script tries to use undeclared variables

echo "Syntax check started for $0. On any syntax error script will exit"
bash -n .config # check and exit for syntax errors in script.
echo "Syntax is OK."

#############################
IMAGE_NAME="core-image-minimal"
#############################

#############################
GIT_BRANCH_URL="https://github.com/cevatbostancioglu/meta-virtualization-ci.git"
GIT_CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

GIT_CURRENT_TAG=$(git describe --abbrev=0 --tags | wc -l)
if [ "$GIT_CURRENT_TAG" -eq 0 ]; then
    GIT_CURRENT_TAG=${GIT_CURRENT_TAG:-default}
else
    GIT_CURRENT_TAG=$(git describe --abbrev=0 --tags)
fi
#############################

#############################
if [ "$GIT_CURRENT_BRANCH" = "master" ]; then
    CACHE_POLICY="master"
elif [ "$GIT_CURRENT_BRANCH" = "dev" ]; then
    CACHE_POLICY="dev"
else
    CACHE_POLICY="global"
fi
#############################

#############################
YOCTO_DIR="${PWD}"
SCRIPTS_FOLDER="${PWD}/../scripts"
TESTS_FOLDER="${SCRIPTS_FOLDER}/tests"
#############################

#############################
DOWNLOAD_PATH="/build/${TARGET_ARCH}/downloads"
BUILD_DIR="/build/${TARGET_ARCH}/${MACHINE_NAME}/${CACHE_POLICY}"
SSTATE_DIR="${BUILD_DIR}/sstate-cache"
TMPDIR="${BUILD_DIR}/tmp"
DEPLOY_DIR="${TMPDIR}/deploy"
POKY_DIR="${DOWNLOAD_PATH}/poky"
OE_DIR="${DOWNLOAD_PATH}/meta-openembedded"
META_VIRTUALIZATION_DIR="${DOWNLOAD_PATH}/meta-virtualization"
###############################

###############################
QEMU_NAMED_OUT="${DOWNLOAD_PATH}/guest.out"
QEMU_MACHINE_IP="192.168.7.2"
QEMU_MACHINE_USER="root"
SCP_COPY_TIMEOUT="10"
QEMU_SSH_OPTION="-o ConnectTimeout=${SCP_COPY_TIMEOUT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR ${QEMU_MACHINE_IP}"
###############################

###############################
if [ "$GIT_CURRENT_BRANCH" = "master" ]; then
    echo "Master Cache Policy: Checking for ${GIT_CURRENT_TAG}"
    if [ "${GIT_CURRENT_TAG}" = "stable" ]; then
        echo "Master Cache Policy: All build caches gonna be removed."
        rm -rf ${BUILD_DIR} || true
        rm -rf ${POKY_DIR} || true
        rm -rf ${OE_DIR} || true
        rm -rf ${META_VIRTUALIZATION_DIR} || true
    fi
elif [ "$GIT_CURRENT_BRANCH" = "dev" ]; then
    echo "Dev Cache Policy: Checking for ${GIT_CURRENT_TAG}"
else
    echo "Global Cache Policy: Checking for ${GIT_CURRENT_TAG}"
fi
###############################
